<?php

/**
 * Implements hook_flag_default_flags
 */
function flag_application_flag_default_flags() {
    $flags = [];
// Exported flag: "Flag Application".
    $flags['flag_application'] = [
        'entity_type' => 'node',
        'title' => 'Flag Application',
        'global' => '0',
        'types' =>
            [
            ],
        'flag_short' => 'Apply',
        'flag_long' => 'Apply for this',
        'flag_message' => 'Thanks for applying',
        'unflag_short' => 'Remove your application',
        'unflag_long' => 'Remove your application for this from the site',
        'unflag_message' => 'Your application has been removed',
        'unflag_denied_text' => '',
        'link_type' => 'toggle',
        'weight' => 0,
        'show_in_links' =>
            [
                'full' => 'full',
                'teaser' => 'teaser',
                'rss' => 0,
                'search_index' => 0,
                'search_result' => 0,
            ],
        'show_as_field' => 1,
        'show_on_form' => 0,
        'access_author' => '',
        'show_contextual_link' => 0,
        'i18n' => 0,
        'api_version' => 3,
    ];
    return $flags;
}

/**
 * Act on an object being flagged.
 *
 * @param flag_flag $flag
 *  The flag object.
 * @param int $entity_id
 *  The id of the entity the flag is on.
 * @param $account
 *  The user account performing the action.
 * @param $flagging_id
 *  The flagging entity.
 * Implements hook_flag_flag
 * @throws Exception
 */
function flag_application_flag_flag($flag, $entity_id, $account, $flagging) {
    /*dpm($flag);
    dpm($entity_id);
    dpm($account);*/
    dpm($flagging);

    if ($flag->name == 'flag_application') {
        $node_id = db_insert('flag_application')
            ->fields([
                'flagging_id' => $flagging->flagging_id,
                'status' => 0,
            ])
            ->execute();
    }
}

/**
 * Act on an object being unflagged.
 *
 * This is invoked after the flag count has been decreased, but before the
 * flagging entity has been deleted.
 *
 * @param $flag
 *  The flag object.
 * @param int $entity_id
 *  The id of the entity the flag is on.
 * @param $account
 *  The user account performing the action.
 * @param $flagging
 *  The flagging entity.
 */
function flag_application_flag_unflag($flag, $entity_id, $account, $flagging) {

    if ($flag->name == 'flag_application') {
        $deleted = db_delete('flag_application')
            ->condition('flagging_id', $flagging->flagging_id)
            ->execute();
    }
}


/**
 * Implements hook_menu().
 */
function flag_application_menu() {
    $items['admin/structure/flags/flag_application'] = array(
        'title' => 'Flag Applications',
        'description' => 'Find and manage flag applications.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flag_application_form'),
//        'access callback' => 'flag_application_permission',
        'access arguments' => array('administer flag applications'),
        'weight' => -10,
        'file' => 'flag_application.admin.inc',
    );

    return $items;
}

/**
 * implements hook_permission()
 */
function flag_application_permission() {
    // return TRUE;

    return [
        'administer flag applications' => [
            'title' => t('Administer Flag Applications'),
            'description' => t('Approve and Deny Flag Applications'),
        ]
    ];
}

function flag_application_form_flag_form_alter(&$form, &$form_state, $form_id) {
    /*dpm($form_id);
    dpm($form);*/
    if ($form['#flag_name'] == 'flag_application') {
        $form['flag_application'] = [
            '#type' => 'fieldset',
            '#title' => 'Flag Application Settings',
            '#collapsible' => TRUE,
            'flag_application_approved_action' => [
                '#type' => 'checkbox',
                '#title' => 'Flag Application Settings',
                //'#default_value' => $form['#flag']->flag_application_approved_action,
                '#default_value' => variable_get('flag_application_approved_action', 0),
                '#description' => 'Disable link for other users once application is approved'
            ],
            'flag_application_maintained_message' => [
                '#type' => 'textfield',
                '#title' => 'Maintained message',
                //'#default_value' => $form['#flag']->flag_application_maintained_message,
                '#default_value' => variable_get('flag_application_maintained_message', ''),
                '#description' => 'Message to display if the node has an application approved for it and the link is disabled'
            ],
        ];

        $form['#submit'][] = 'flag_application_form_flag_form_alter_submit';
    }
}

function flag_application_form_flag_form_alter_submit($form, $form_state) {
    // dpm($form); dpm($form_state);
    variable_set('flag_application_approved_action', $form_state['values']['flag_application_approved_action']);
    variable_set('flag_application_maintained_message', $form_state['values']['flag_application_maintained_message']);
}